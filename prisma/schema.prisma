generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  telepon       String?
  roleId        String      
  role          Role        @relation(fields: [roleId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  pemesanan     Pemesanan[]
  ulasan         Ulasan[]
  balasanUlasan BalasanUlasan[] @relation("UserToBalasanUlasan")
  notifikasi    Json?
  resetPasswordToken      String?
  resetPasswordExpires    DateTime?
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[] @relation("PermissionToRole")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")
}

model Hotel {
  id        String      @id @default(cuid())
  nama      String
  deskripsi String?
  alamat    String
  kota      String
  negara    String
  rating    Float?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  fasilitas Fasilitas[]
  gambar    Gambar[]
  kamar     Kamar[]
  ulasan     Ulasan[]
}

model Kamar {
  id        String      @id @default(cuid())
  hotelId   String
  nama      String
  nomorKamar String
  deskripsi String?
  harga     Float
  kapasitas Int
  tipe      String
  status    String      @default("TERSEDIA")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  gambar    Gambar[]
  hotel     Hotel       @relation(fields: [hotelId], references: [id])
  pemesanan Pemesanan[]
  @@unique([hotelId, nomorKamar])
}

model Pemesanan {
  id               String      @id @default(cuid())
  userId           String
  kamarId          String
  checkIn          DateTime
  checkOut         DateTime
  totalHarga       Float
  status           String      @default("PENDING")
  jumlahTamu       Int
  permintaanKhusus String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  pembayaran       Pembayaran?
  kamar            Kamar       @relation(fields: [kamarId], references: [id])
  user             User        @relation(fields: [userId], references: [id])
}

model Pembayaran {
  id               String    @id @default(cuid())
  pemesananId      String    @unique
  jumlah           Float
  metodePembayaran String
  status           String    @default("PENDING")
  idTransaksi      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  pemesanan        Pemesanan @relation(fields: [pemesananId], references: [id])
}

model Ulasan {
  id        String   @id @default(cuid())
  userId    String
  hotelId   String
  rating    Int
  komentar  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gambar    Gambar[]
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  balasanUlasan   BalasanUlasan[]
  anonim    Boolean @default(false)
}

model Fasilitas {
  id        String   @id @default(cuid())
  hotelId   String
  nama      String
  ikon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
}

model Gambar {
  id        String   @id @default(cuid())
  url       String
  hotelId   String?
  kamarId   String?
  ulasanId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel?   @relation(fields: [hotelId], references: [id])
  kamar     Kamar?   @relation(fields: [kamarId], references: [id])
  ulasan    Ulasan?  @relation(fields: [ulasanId], references: [id])
}

model BalasanUlasan {
  id        String   @id @default(cuid())
  ulasanId  String
  adminId   String
  isi       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ulasan    Ulasan   @relation(fields: [ulasanId], references: [id])
  admin     User     @relation("UserToBalasanUlasan", fields: [adminId], references: [id])
}
